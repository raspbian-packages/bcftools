Description: Fix test_vcf_query on 32-bit architectures
 Introduced by upstream commit:
 https://github.com/samtools/bcftools/commit/25d042b833987d32e5de1fc3a109d357c4d0f738
Forwarded: https://github.com/samtools/bcftools/pull/701
Applied-Upstream: https://github.com/samtools/bcftools/commit/e436c3d0fb26614505fb02297a21a5ede1961723
Bug-Debian: https://bugs.debian.org/868958
Author: Graham Inggs <ginggs@debian.org>
Last-Update 2017-11-09
--- a/vcfnorm.c
+++ b/vcfnorm.c
@@ -94,7 +94,7 @@
 }
 static inline int has_non_acgtn(char *seq, int nseq)
 {
-    char *end = nseq ? seq + nseq : seq + UINT32_MAX;   // arbitrary large number
+    char *end = seq + nseq;
     while ( *seq && seq<end )
     {
         char c = toupper(*seq);
@@ -326,7 +326,7 @@
     {
         if ( line->d.allele[i][0]=='<' ) return ERR_SYMBOLIC;  // symbolic allele
         if ( line->d.allele[i][0]=='*' ) return ERR_SPANNING_DELETION;  // spanning deletion
-        if ( has_non_acgtn(line->d.allele[i],0) )
+        if ( has_non_acgtn(line->d.allele[i],line->shared.l) )
         {
             if ( args->check_ref==CHECK_REF_EXIT )
                 error("Non-ACGTN alternate allele at %s:%d .. REF_SEQ:'%s' vs VCF:'%s'\n", bcf_seqname(args->hdr,line),line->pos+1,ref,line->d.allele[i]);
